# Lorenz System - State-Space Manifold Learning with Comparison Mode
system_name: "lorenz_manifold"

# Training Mode: "reconstruction", "prediction", or "comparison"
mode: "comparison"

# Lorenz System Definition
dynamics:
  type: "lorenz"
  parameters:
    sigma: 10.0
    rho: 28.0
    beta: 2.667

# Initial Conditions Sampling
initial_conditions:
  bounds:
    x: [-15.0, 15.0]
    y: [-20.0, 20.0] 
    z: [5.0, 35.0]
  num_samples: 500
  sampling_method: "random"

# Trajectory Generation
trajectory:
  time_span: [0.0, 10.0]
  time_points: 500
  solver: "RK45"
  rtol: 0.00000001
  atol: 0.0000000001
  normalize: true
  remove_transient: 50

# Dataset Configuration
dataset:
  train_split: 0.8
  val_split: 0.1
  test_split: 0.1
  shuffle: true
  random_seed: 42

# State-Space Autoencoder (3D -> 2D manifold)
autoencoder:
  latent_dim: 2
  
  encoder:
    hidden_layers: [64, 32]
    activation: "relu"
    dropout: 0.0
    batch_norm: false
  
  decoder:
    hidden_layers: [32, 64]
    activation: "relu"
    dropout: 0.0
    batch_norm: false
    output_activation: "linear"
  
  # Latent dynamics network (only used in prediction mode)
  latent_dynamics:
    hidden_layers: [64, 64]
    activation: "relu"
    dropout: 0.0
  
  # MLP dynamics network for comparison (operates directly in state space)
  mlp_dynamics:
    hidden_layers: [64, 64]
    activation: "tanh"
    dropout: 0.0

# Training Configuration
training:
  batch_size: 512
  epochs: 10
  learning_rate: 0.001
  optimizer: "adam"
  scheduler:
    type: "step"
    step_size: 40
    gamma: 0.7
  loss_function: "mse"
  early_stopping:
    patience: 20
    min_delta: 0.000001
  save_best_model: true
  
  # Prediction mode settings (only used when mode: "prediction")
  prediction:
    reconstruction_weight: 1.0  # Weight for reconstruction loss
    prediction_weight: 1.0      # Weight for prediction loss
    
    # Multi-step prediction settings
    prediction_steps: 3         # Number of future steps to predict (k)
    decay_factor: 0.9          # Exponential decay factor (gamma) for multi-step loss
                               # Loss = w1*L(t+1) + w2*L(t+2) + ... + wk*L(t+k)
                               # where wi = gamma^(i-1)

# Evaluation Configuration
evaluation:
  metrics:
    - "reconstruction_error"
    - "manifold_quality"
    - "pca_comparison"
  
  visualization:
    plot_manifold: true
    plot_reconstruction: true
    plot_trajectories: true
    save_plots: true
    plot_format: "png"
    dpi: 300

# Output Configuration
output:
  base_dir: "results"
  experiment_name: "lorenz_manifold"
  save_model: true
  save_embeddings: true
  generate_report: true 